[General]
Repo=https://rtc.mySite.com/ccm
User=USR
Password=secret
GIT-Reponame = myGitRepo.git
WorkspaceName=ToBeCreatedWorkspaceName
# If this value is set to True, the workspace referred with workspacename will just be loaded instead of newly created
useExistingWorkspace = False
# Folder to be created - where migration will take place
Directory = \temp\myWorkingDirectory
# Scm command to use (lscm or scm)
ScmCommand = lscm
# Optional - Set encoding of files (For example encoding = UTF-8)
# See "https://github.com/rtcTo/rtc2git/wiki/Encoding" for further instructions
encoding =
# Optional - Set empty SVN repo directory if you want to commit also on a SVN repo
SVNRepoDir =

[Migration]
# Stream to be migrated,  referenced by Name or UUID
StreamToMigrate = MyDevelopmentStream

# Optional - Used by author for prepare a workspace for migrating an earlier release-stream to a later one
# (eg. When Migrating Stream_Version2, Previous-Stream would be Stream_Version1
PreviousStream=

# Specify if you want to load a single component
component2Load =

# Optional, can be defined additionally to set the workspace to a specific baseline
# Use following format: ComponentName = BaseLineName, AnotherComponentName=BaseLineName
# If its not set, it will determine the oldest baseline (takes some time, depending of how much components you have in your stream)
InitialBaseLines =

# False - Rely on order of changeset provided by the rtc cli compare command (due wrong order, more likely to cause merge-conflicts
# True - (Component)History needs to be provided in a separate file by the user
# For more information read https://github.com/rtcTo/rtc2git/wiki/Getting-your-History-Files
UseProvidedHistory = False

# Determines whether to prompt the user to accept change sets together to resolve accept errors.
# False - The user is prompted
# True - The user is not prompted
UseAutomaticConflictResolution = False

# The max number of change sets to accept together in order to resolve a merge conflict.
MaxChangeSetsToAcceptTogether = 10

# Optional, defines a prefix for commit-messages, which were linked to an rtc workitem.
# In case you have migrated your workitems to another issue system (like jira/github/bitbucket) by using rtc2jira,
# you can define a prefix for the commit-message, in order that previously linked rtc commits get linked to the new issue system.
#
# Examples:
# In jira: AP- (Project has the key AP and is followed by a dash)
# see https://confluence.atlassian.com/jiracloud/processing-jira-issues-with-commit-messages-740098538.html for more details)
# On bitbucket/github: #
CommitMessageWorkItemPrefix=

# Optional: Specifies the line(s) which are added to .gitattributes
# Define a semicolon-separated list of lines
# Example:
# Gitattributes = # handle text files; * text=auto; *.sql text
Gitattributes =

[Miscellaneous]
# Set to true if you want to see which commands are sent to command line
LogShellCommands = False

# Ignore big (binary) files
# Define a semicolon-separated list of extensions to be generally ignored
# Example:
# IgnoreFileExtensions = .zip; .jar; .exe; .dll
IgnoreFileExtensions =

# Optional: ignore directories
# Define a semicolon-separated list of directories to be generally excluded
# (we need the full path inside the resulting git repository)
# Example:
# IgnoreDirectories = projectX/WebContent/node_modules; projectY/distribution
IgnoreDirectories =

# Set to true if you want to include component root directories when loading the workspace
# (this will add the -i / --include-root option to the (l)scm load command)
IncludeComponentRoots = False
